@model ChatApp.Models.ViewModels.PrivateChatViewModel
@{
    ViewData["Title"] = $"Chat with {Model.ReceiverName}";
    var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
    var currentUserName = User.FindFirst("FirstName")?.Value + " " + User.FindFirst("LastName")?.Value;
    var currentUser = User?.Identity?.Name;
    int count = 0;
}

<!-- Hidden data attributes for ChatManager -->
<div id="chat-context"
     data-current-user="@currentUser"
     data-current-user-id="@currentUserId"
     data-current-user-fullname="@currentUserName"
     data-receiver-id="@Model.ReceiverId"
     data-receiver-name="@Model.ReceiverName"
     style="display: none;"></div>

<div class="row">
    <div class="col-md-9">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <a href="@Url.Action("ChatList", "Chat")" class="btn btn-outline-secondary btn-sm me-3">
                        ← Back
                    </a>
                    <div>
                        <h5 class="mb-0">@Model.ReceiverName</h5>
                        <small id="userStatus" class="text-muted">Loading...</small>
                    </div>
                </div>
                <span id="connectionStatus" class="badge bg-secondary">Connecting...</span>
            </div>
            <div class="card-body">
                <div id="messagesList" class="chat-container">
                    @foreach (var message in Model.Messages)
                    {
                        count++;
                        var isOwnMessage = message.SenderId == currentUserId;
                        <div class="message @(isOwnMessage ? "own" : "other")" data-message-id="@message.Id">
                            <div class="message-content">@message.Message</div>
                            @if (isOwnMessage)
                            {
                                <div class="message-status">
                                    @if (message.IsRead)
                                    {
                                        <small class="chat-status">✓✓✓ Seen @message.ReadAt?.ToString("HH:mm")</small>
                                    }
                                    else
                                    {
                                        <small class="chat-status">✓ Sent @message.Timestamp.ToString("HH:mm")</small>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>

                <div class="input-group">
                    <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." maxlength="1000" />
                    <button class="btn btn-primary" type="button" id="sendButton">Send</button>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-3">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">Online Users</h6>
            </div>
            <div class="card-body">
                <div id="usersList" class="online-users">
                    @foreach (var user in Model.OnlineUsers)
                    {
                        var isCurrentUser = user.Id == currentUserId;
                        var isReceiver = user.Id == Model.ReceiverId;
                        var url = Url.Action("PrivateChat", "Chat", new { userId = user.Id });

                        <div class="user-item @(user.IsOnline ? "" : "offline") @(isReceiver ? "current-chat" : "")"
                             data-user-id="@user.Id"
                             data-url="@url"
                             style="cursor: pointer;">
                            <span class="@(user.IsOnline ? "text-success" : "text-muted") me-1">●</span>
                            @if (isCurrentUser)
                            {
                                <strong>You (@user.FirstName @user.LastName)</strong>
                            }
                            else
                            {
                                <strong>@user.FirstName @user.LastName</strong>
                            }
                            <br />
                            @if (user.IsOnline)
                            {
                                <span class="text-success ms-4">Online</span>
                            }
                            else
                            {
                                <div class="text-muted ms-4">Last seen: @user.LastSeen.ToString("MMM dd, HH:mm")</div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/chat-common.js"></script>
    <script>
        // Page-specific initialization after ChatManager is ready
        document.addEventListener('DOMContentLoaded', function () {
            // Set context from hidden elements
            if (window.chatManager) {
                const contextElement = document.getElementById('chat-context');
                if (contextElement) {
                    chatManager.currentUser = contextElement.getAttribute('data-current-user');
                    chatManager.currentUserId = contextElement.getAttribute('data-current-user-id');
                    chatManager.currentUserFullName = contextElement.getAttribute('data-current-user-fullname');
                    chatManager.receiverId = contextElement.getAttribute('data-receiver-id');
                    chatManager.receiverName = contextElement.getAttribute('data-receiver-name');
                }
            }
        });
        console.log(@count);
    </script>
}

<style>
    .chat-container {
        height: 70vh;
        overflow-y: auto;
        border: 1px solid #ddd;
        padding: 15px;
        background-color: #f8f9fa;
    }

    .message-status {
        font-size: 0.7em;
        opacity: 0.8;
    }

    .user-item {
        padding: 8px 0;
        border-bottom: 1px solid #eee;
    }

        .user-item.offline {
            opacity: 0.6;
        }

        .user-item.current-chat {
            background-color: #e3f2fd;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #2196f3;
        }

    .online-users {
        height: 70vh;
        overflow-y: auto;
    }

    .chat-status {
        color: white !important;
        opacity: 1;
    }
</style>